name: CI/CD Pipeline
run-name: Running CI/CD Pipeline

on: [push, pull_request]

permissions:
  id-token: write
  contents: read

jobs:
  Run-Build:
    name: Build Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Setup Node 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: npm ci

      - name: Add Environment Variables
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cat << EOF > .env
          VITE_APP_VERSION=${{ secrets.VITE_APP_VERSION }}
          VITE_APP_GOOGLE_MAPS_API_KEY=${{ secrets.VITE_APP_GOOGLE_MAPS_API_KEY }}
          VITE_APP_GOOGLE_MAPS_API_ID=${{ secrets.VITE_APP_GOOGLE_MAPS_API_ID }}
          VITE_APP_PROXY_BASE_URL=${{ secrets.VITE_PROXY_BASE_URL_DEV }}
          EOF

      - name: Build
        run: npm run build

      - name: Cache Build Artifacts
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/cache@v4
        with:
          path: dist
          key: build-${{ github.run_id }}
          restore-keys: |
            build-

  Run-Tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Setup Node 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test
      - name: Check coverage
        run: npm run coverage

  Deploy-Dev:
    name: Deploy to AWS S3 Dev
    needs: [Run-Build, Run-Tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Retrieve Build Artifacts
        uses: actions/cache@v4
        id: cache-build-artifacts
        with:
          path: dist
          key: build-${{ github.run_id }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_IAM_ROLE }}
          role-session-name: deploy-hydroserver-dev
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy to S3
        run: |
          echo ${{ vars.AWS_WEB_DEV_BUCKET }}
          aws s3 sync ./dist s3://${{ vars.AWS_WEB_DEV_BUCKET }}/ --delete

      - name: Invalidate CloudFront distribution cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_ID }} --paths "/*"
